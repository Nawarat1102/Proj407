import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import sympy as sp

# --- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ (‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°) ---
plt.rcParams['font.family'] = 'Tahoma'
plt.rcParams['font.size'] = 10
plt.rcParams['axes.unicode_minus'] = False # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏•‡∏ö
# ----------------------------------------------------

def false_position(f, a, b, tol=0.001):
    steps = []
    while True:
        fa, fb = f(a), f(b)
        
        if np.isclose(fb, fa):
            st.warning("f(a) ‡πÅ‡∏•‡∏∞ f(b) ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏Å‡∏±‡∏ô‡∏°‡∏≤‡∏Å ‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô")
            break
            
        c = a - (b - a) * fa / (fb - fa)
        fc = f(c)

        steps.append((a, b, c, fa, fb, fc))

        if abs(fc) < tol:
            break

        if fa * fc < 0:
            b = c
        else:
            a = c
            
        if len(steps) > 100:
            st.warning("‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏Å‡∏¥‡∏ô 100 ‡∏£‡∏≠‡∏ö ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏•‡∏π‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö")
            break
            
    return c, steps

st.title("False Position Method (Regula Falsi)")

st.markdown(
    """
    <div style="border:2px solid #4CAF50; padding:12px; border-radius:8px; background-color:#f9f9f9">
        <b>‚ö† ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô ‚ö†</b><br><br>
        - e ‡∏¢‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á x ‚Üí <code>exp(x)</code><br>
        - ‡∏¢‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‚Üí <code>x**2</code> (‡πÄ‡∏ä‡πà‡∏ô x¬≤), <code>x**3</code> (‡πÄ‡∏ä‡πà‡∏ô x¬≥)<br>
        - ‡∏£‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á (‚àöx) ‚Üí <code>sqrt(x)</code><br>
        - ‡∏•‡∏≠‡∏Å‡∏≤‡∏£‡∏¥‡∏ó‡∏∂‡∏°‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥ (ln) ‚Üí <code>log(x)</code><br>
        - ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏π‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà <code>*</code> ‡πÄ‡∏ä‡πà‡∏ô 3x ‚Üí <code>3*x</code><br>
        <br>
        ‚úÖ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: <code>(x**3) - (x**2) - 0.1</code>, <code>exp(x) - 3*x</code>, <code>sin(x) - x/2</code>
    </div>
    """,
    unsafe_allow_html=True
)

user_equation = st.text_input("‡∏Å‡∏£‡∏≠‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô f(x):", value="exp(x) - 3*x")

x = sp.symbols("x")
try:
    expr = sp.sympify(user_equation)
    f = sp.lambdify(x, expr, "numpy")
except Exception as e:
    st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏™‡∏°‡∏Å‡∏≤‡∏£: {e}")
    st.stop()

a = st.number_input("‡∏Ñ‡πà‡∏≤ A (‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ã‡πâ‡∏≤‡∏¢)", value=0.0)
b = st.number_input("‡∏Ñ‡πà‡∏≤ B (‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏ß‡∏≤)", value=1.0)

if st.button("‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì"):
    
    if a >= b:
        st.error("‚ùå **‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:** ‡∏Ñ‡πà‡∏≤ A (‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏ã‡πâ‡∏≤‡∏¢) ‡∏ï‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤ B (‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏Ç‡∏ß‡∏≤)")
    else:
        fa_val = f(a)
        fb_val = f(b)

        if fa_val * fb_val >= 0:
            st.error(f"‚ùå **‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:** f(a) ‡πÅ‡∏•‡∏∞ f(b) ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô")
            st.info(f"‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏Ñ‡∏∑‡∏≠: f({a}) = {fa_val:.4f} ‡πÅ‡∏•‡∏∞ f({b}) = {fb_val:.4f}")
        else:
            st.write("---") 
            
            root, steps = false_position(f, a, b, tol=0.001)

            st.success(f"**‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì = {root:.6f}**")

            st.write("### üìù ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì")
            st.table(
                {
                    "a": [f"{s[0]:.6f}" for s in steps],
                    "b": [f"{s[1]:.6f}" for s in steps],
                    "c": [f"{s[2]:.6f}" for s in steps],
                    "f(a)": [f"{s[3]:.6f}" for s in steps],
                    "f(b)": [f"{s[4]:.6f}" for s in steps],
                    "f(c)": [f"{s[5]:.6f}" for s in steps],
                }
            )

            st.write("### üìà ‡∏Å‡∏£‡∏≤‡∏ü‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏à‡∏∏‡∏î C")
            x_vals = np.linspace(a - 1, b + 1, 400)
            y_vals = f(x_vals)

            fig, ax = plt.subplots()
            ax.axhline(0, color="gray", linestyle='--', linewidth=0.8)
            ax.plot(x_vals, y_vals, label="f(x)")
            
            # --- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç label ‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ ---
            # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô label ‡∏à‡∏≤‡∏Å "‡∏à‡∏∏‡∏î (c)" ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
            ax.plot([s[2] for s in steps], [s[5] for s in steps], "ro", label="Point (c)") 
            # ---------------------------------
            
            ax.grid(True, linestyle=':', linewidth=0.5)
            ax.set_xlabel("x")
            ax.set_ylabel("f(x)")
            ax.legend()
            st.pyplot(fig)